-# Locals:
-#   collection:
-#   attributes:
-#   column_types (optional):
-#   column_headers (optional):
-#   html_table_id:
-#   filtering_values:
-#   klass (optional):

- klass ||= collection.klass

-# It is assumed here that PseudoColumns module is included
- column_types ||= klass.column_db_types

-# It is assumed here that AbstractHumanizedModel module is included
- column_headers ||= klass.human_column_headers

%form{:method => :get}
  = hidden_field_tags_from_nested_hash params.slice(:filter, :sort)

  %label{:for => :per_page}
    = t('field_labels.per_page')
  %select.number{ :name => :per_page }
    = options_for_select [5, 10, 25, 50, 100, 250, 500, 1000],
                         params[:per_page] || klass.default_per_page
  %span.actions
    %button{ :type  => 'submit',
             :name  => 'button',
             :value => 'repaginate' }
      = t('buttons.repaginate')

= paginate collection

%form{ :id     => (filter_form_id = "#{ html_table_id }_filter"),
       :method => :get }
  = hidden_field_tags_from_nested_hash params.slice(:filter, :sort)

%form{ :id     => (clear_filter_form_id = "#{ html_table_id }_clear_filter"),
       :method => :get }
  = hidden_field_tags_from_nested_hash params.slice(:sort)

%table.records{ :id    => html_table_id,
                :class => (filtering_values.blank? ? nil : 'filtered ') }
  %colgroup.attributes
    - attributes.size.times do
      %col
  %colgroup
    %col
    %col
  %thead
    %tr
      - attributes.each do |attr|

        %th{ :class => html_class_from_column_type(column_types[attr]) }<
          = sortable html_table_id, attr, column_headers[attr]

      %th.empty
      %th.empty
    %tr
      - attributes.each do |attr|

        = render 'shared/tables/filtering_field',
                 :filter_form_id  => filter_form_id,
                 :attr            => attr,
                 :select_from     => klass.possible_values_of(attr),
                 :column_type     => column_types[attr],
                 :value_or_values => filtering_values[attr]

      %td.empty
      %td.empty
    %tr
      %td.actions{ :colspan => attributes.size }
        %button{ :type  => 'submit',
                 :form  => filter_form_id,
                 :name  => 'button',
                 :value => 'filter' }
          = t('buttons.filter')

        %button{ :type  => 'submit',
                 :form  => clear_filter_form_id,
                 :name  => 'button',
                 :value => 'filter' }
          = t('buttons.clear')

      %td.empty
      %td.empty
    - unless filtering_values.blank?
      %tr
        - attributes.each do |attr|
          - if (val = filtering_values[attr]).blank?
            %td
          - else
            - html_class = html_class_from_column_type(column_types[attr])
            %td.filtering_value{ :class => html_class }
              = formatted_filtering_value val, column_types[attr]

        %td.empty
        %td.empty

  = render 'shared/tables/index_body',
           :collection   => collection,
           :attributes   => attributes,
           :column_types => column_types

-# </table>

= paginate collection
